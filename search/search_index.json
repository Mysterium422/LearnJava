{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Learn Java Goal The goal of this website is go from no prior experience to coding a simple text adventure game. Note that this format purposefully simply has goals and hints for each section, and there isn't a huge amount of teaching. This is because a big part of coding is learning from google, stackoverflow, documentation, and ChatGPT. Use of AI Note that these assignments would likely be simple enough for ChatGPT to solve. Thus, I recommend that any questions to ChatGPT should not be specific to this project. Ask broad, general questions which could apply to any project, not just this one. In addition, I recommend that you never copy/paste from the site or your code to ChatGPT, or from ChatGPT to your code. It is up to you to follow these heuristics, these are only recommendations for you to maximize your learning","title":"Welcome"},{"location":"#welcome-to-learn-java","text":"","title":"Welcome to Learn Java"},{"location":"#goal","text":"The goal of this website is go from no prior experience to coding a simple text adventure game. Note that this format purposefully simply has goals and hints for each section, and there isn't a huge amount of teaching. This is because a big part of coding is learning from google, stackoverflow, documentation, and ChatGPT.","title":"Goal"},{"location":"#use-of-ai","text":"Note that these assignments would likely be simple enough for ChatGPT to solve. Thus, I recommend that any questions to ChatGPT should not be specific to this project. Ask broad, general questions which could apply to any project, not just this one. In addition, I recommend that you never copy/paste from the site or your code to ChatGPT, or from ChatGPT to your code. It is up to you to follow these heuristics, these are only recommendations for you to maximize your learning","title":"Use of AI"},{"location":"arithmetic/","text":"Step 2: Variables and Arithmetic 2.1: First Operation First, given variables damage and number_of_hits , print the total damage dealt. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1 Code goes here */ /** Step 2.1 */ int damage = 4; // Comment this line when using the next line // double damage = 2.5; // Uncomment this line to try it with a decimal int number_of_hits = 3; // TODO Print the total damage dealt } } Expect Output 12 (if using int) 7.5 (if using double) 2.2: More Operations Next, given variables opponent_health , opponent_damage , opponent_shield , player_health , player_damage , and player_shield , calculate the damage dealt by the opponent on the player. Damage dealt is calculated as damage - shield . Store the damage dealt in a variable called damage_dealt . Subtract this damage from the player's health and print their new health to console. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1 & 2.1 Code goes here */ // TODO: Print a Welcome Message Here /** Step 2.2 */ double player_health = 40; int player_damage = 10; int player_shield = 3; double opponent_health = 50; int opponent_damage = 8; int opponent_shield = 6; int damage_dealt = 0; // TODO: Calculate the damage dealt // TODO: Subtract the damage from the player's health and print it to console } } Expect Output 35.0 2.3: Integer Division Calculate the number of hits it will take to defeat the opponent. You may NOT use any imports. Use casting and integer division. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1, 2.1 & 2.2 Code goes here */ /** Step 2.3 */ // TODO: Calculate and print the number of hits needed to defeat the opponent. Do NOT use any imports. } } Expected Output 13 2.4: Update a variable You received a powerbuff! Increase the player's damage by 30%. Then, calculate the opponent's new health if the player deals a hit. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1, 2.1, 2.2 & 2.3 Code goes here */ /** Step 2.4 */ // TODO: Increase the player's damage by 30%. Only use multiplication. // TODO: Calculate and print the opponent's new health after the player deals a hit } } Expected Output 43.0","title":"Step 2: Variables and Arithmetic"},{"location":"arithmetic/#step-2-variables-and-arithmetic","text":"","title":"Step 2: Variables and Arithmetic"},{"location":"arithmetic/#21-first-operation","text":"First, given variables damage and number_of_hits , print the total damage dealt. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1 Code goes here */ /** Step 2.1 */ int damage = 4; // Comment this line when using the next line // double damage = 2.5; // Uncomment this line to try it with a decimal int number_of_hits = 3; // TODO Print the total damage dealt } } Expect Output 12 (if using int) 7.5 (if using double)","title":"2.1: First Operation"},{"location":"arithmetic/#22-more-operations","text":"Next, given variables opponent_health , opponent_damage , opponent_shield , player_health , player_damage , and player_shield , calculate the damage dealt by the opponent on the player. Damage dealt is calculated as damage - shield . Store the damage dealt in a variable called damage_dealt . Subtract this damage from the player's health and print their new health to console. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1 & 2.1 Code goes here */ // TODO: Print a Welcome Message Here /** Step 2.2 */ double player_health = 40; int player_damage = 10; int player_shield = 3; double opponent_health = 50; int opponent_damage = 8; int opponent_shield = 6; int damage_dealt = 0; // TODO: Calculate the damage dealt // TODO: Subtract the damage from the player's health and print it to console } } Expect Output 35.0","title":"2.2: More Operations"},{"location":"arithmetic/#23-integer-division","text":"Calculate the number of hits it will take to defeat the opponent. You may NOT use any imports. Use casting and integer division. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1, 2.1 & 2.2 Code goes here */ /** Step 2.3 */ // TODO: Calculate and print the number of hits needed to defeat the opponent. Do NOT use any imports. } } Expected Output 13","title":"2.3: Integer Division"},{"location":"arithmetic/#24-update-a-variable","text":"You received a powerbuff! Increase the player's damage by 30%. Then, calculate the opponent's new health if the player deals a hit. /** Main.java */ public class Main { public static void main(String[] args) { /** Step 1, 2.1, 2.2 & 2.3 Code goes here */ /** Step 2.4 */ // TODO: Increase the player's damage by 30%. Only use multiplication. // TODO: Calculate and print the opponent's new health after the player deals a hit } } Expected Output 43.0","title":"2.4: Update a variable"},{"location":"checkpoint-1/","text":"Step 8: Checkpoint 1 We've learned a lot, let's have an intermediate project to put the skills we've learned so far to the test. This assignment is considerably harder than the previous steps, and should take much longer. Create a new file called Game.java . Create a static main function in there similar to the one in Main.java . Within this main function, write a program which will be a text engine player vs bot game. Here's how. 1) Define the variables. You'll need a health, damage, and defense stat for both the player and the enemy/opponent. There'll be other variables necessary later on as well. 2) Until either you or the enemy is dead, repeat rounds over and over again. Each round has the following: First, print beginning round i where i is the round # (starts at 1) Next, the player performs an action by typing the first letter of their desired action. If the letter typed is invalid, print that and wait for a new action. Print the selected action to the console. Perform the action. Here are the actions: Attack: Deal damage to the enemy Strengthen: Increase your damage by 10% Weaken: Decrease your enemy's defense and damage by 10%. Only has a 50% chance of working Heal: Heal to full health. This can only be done once. If tried again, the ability fails and the turn is skipped saying that the ability failed . If the opponent is dead, write a game over message and stop the program. Print the player's remaining health. Select a random action for the opponent to perform. Here are their actions: Attack (60%): Deal damage to the player Harden (20%): Increase defense by 5 Poison (20%): Deal damage / 2 to the player for the next 6 turns. Player defense does not apply. If the player is already poisoned, the bot should only try to Attack and Harden with the renormalized probabilities. If the player is dead, write a you win message and stop the program. Print the opponent's remaining health Print the player's health, damage, defense, and poison status. Print the opponent's health.","title":"Step 8: Checkpoint 1"},{"location":"checkpoint-1/#step-8-checkpoint-1","text":"We've learned a lot, let's have an intermediate project to put the skills we've learned so far to the test. This assignment is considerably harder than the previous steps, and should take much longer. Create a new file called Game.java . Create a static main function in there similar to the one in Main.java . Within this main function, write a program which will be a text engine player vs bot game. Here's how. 1) Define the variables. You'll need a health, damage, and defense stat for both the player and the enemy/opponent. There'll be other variables necessary later on as well. 2) Until either you or the enemy is dead, repeat rounds over and over again. Each round has the following: First, print beginning round i where i is the round # (starts at 1) Next, the player performs an action by typing the first letter of their desired action. If the letter typed is invalid, print that and wait for a new action. Print the selected action to the console. Perform the action. Here are the actions: Attack: Deal damage to the enemy Strengthen: Increase your damage by 10% Weaken: Decrease your enemy's defense and damage by 10%. Only has a 50% chance of working Heal: Heal to full health. This can only be done once. If tried again, the ability fails and the turn is skipped saying that the ability failed . If the opponent is dead, write a game over message and stop the program. Print the player's remaining health. Select a random action for the opponent to perform. Here are their actions: Attack (60%): Deal damage to the player Harden (20%): Increase defense by 5 Poison (20%): Deal damage / 2 to the player for the next 6 turns. Player defense does not apply. If the player is already poisoned, the bot should only try to Attack and Harden with the renormalized probabilities. If the player is dead, write a you win message and stop the program. Print the opponent's remaining health Print the player's health, damage, defense, and poison status. Print the opponent's health.","title":"Step 8: Checkpoint 1"},{"location":"console-input/","text":"Step 6: Console Input Write code which uses the Scanner in order to read a console input (a character), and then prints which move it is. Here is a recap of the possible moves: A: Attack S: Strengthen W: Weaken H: Heal Otherwise print Invalid","title":"Step 6: Console Input"},{"location":"console-input/#step-6-console-input","text":"Write code which uses the Scanner in order to read a console input (a character), and then prints which move it is. Here is a recap of the possible moves: A: Attack S: Strengthen W: Weaken H: Heal Otherwise print Invalid","title":"Step 6: Console Input"},{"location":"control-flow/","text":"Step 4: Control Flow 1 Step 4.1 Let's start writing some actual logic in our code. Write an if statement where if at least one enemy is dead, then it prints An enemy is dead to console. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3 Code goes here */ /** Step 4.1 */ // TODO: Implement 4.1 here } } Expect Output An enemy is dead Step 4.2 Next, let's check if a specific enemy, enemy 2, is dead. If it has less than or equal to 0 health, then print that Enemy 2 has died . /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 4.1 Code goes here */ /** Step 4.2 */ // TODO: Implement 4.2 here } } Expect Output Enemy 2 has died Step 4.3 Let's check our own health. If it's above 35, print Health is stable . If it's less than 0, print You have died. Else print Crtical Warning: Health is low . /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 4.2 Code goes here */ /** Step 4.3 */ // TODO: Implement 4.3 here } } Expect Output Crtical Warning: Health is low Step 4.4 Now try a new control method, a switch statement. Given an action (char), use a Switch statement to print the full name of the action. A: Attack S: Strengthen W: Weaken H: Heal Otherwise print Invalid /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 4.3 Code goes here */ /** Step 4.4 */ char action = ((10 * 10) - (2 * 5) + (4 * 3) - 2) + (15 - 12 - 4 * 4); // TODO: Implement 4.4 here } } Expect Output Weaken","title":"Step 4: Control Flow 1"},{"location":"control-flow/#step-4-control-flow-1","text":"","title":"Step 4: Control Flow 1"},{"location":"control-flow/#step-41","text":"Let's start writing some actual logic in our code. Write an if statement where if at least one enemy is dead, then it prints An enemy is dead to console. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3 Code goes here */ /** Step 4.1 */ // TODO: Implement 4.1 here } } Expect Output An enemy is dead","title":"Step 4.1"},{"location":"control-flow/#step-42","text":"Next, let's check if a specific enemy, enemy 2, is dead. If it has less than or equal to 0 health, then print that Enemy 2 has died . /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 4.1 Code goes here */ /** Step 4.2 */ // TODO: Implement 4.2 here } } Expect Output Enemy 2 has died","title":"Step 4.2"},{"location":"control-flow/#step-43","text":"Let's check our own health. If it's above 35, print Health is stable . If it's less than 0, print You have died. Else print Crtical Warning: Health is low . /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 4.2 Code goes here */ /** Step 4.3 */ // TODO: Implement 4.3 here } } Expect Output Crtical Warning: Health is low","title":"Step 4.3"},{"location":"control-flow/#step-44","text":"Now try a new control method, a switch statement. Given an action (char), use a Switch statement to print the full name of the action. A: Attack S: Strengthen W: Weaken H: Heal Otherwise print Invalid /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 4.3 Code goes here */ /** Step 4.4 */ char action = ((10 * 10) - (2 * 5) + (4 * 3) - 2) + (15 - 12 - 4 * 4); // TODO: Implement 4.4 here } } Expect Output Weaken","title":"Step 4.4"},{"location":"control-flow2/","text":"Step 5: Control Flow 2 Step 5.1 Remember the old code for attacking an enemy? Code an attack on the enemy twice. Print it's health afterwards. Step 5.2 Now code an attack on the enemy 200 times. Use a for loop. Print it's health afterwards. Step 5.3 Now let's attack the enemy until its dead. Print it's health afterwards.","title":"Step 5: Control Flow 2"},{"location":"control-flow2/#step-5-control-flow-2","text":"","title":"Step 5: Control Flow 2"},{"location":"control-flow2/#step-51","text":"Remember the old code for attacking an enemy? Code an attack on the enemy twice. Print it's health afterwards.","title":"Step 5.1"},{"location":"control-flow2/#step-52","text":"Now code an attack on the enemy 200 times. Use a for loop. Print it's health afterwards.","title":"Step 5.2"},{"location":"control-flow2/#step-53","text":"Now let's attack the enemy until its dead. Print it's health afterwards.","title":"Step 5.3"},{"location":"functions/","text":"Step 7: Functions Create a function which takes the attacker damage, defender health, and defender defense, and outputs the defender's new health. Note that you should cover edge cases, such as the fact that health can't be negative and that damage dealt can't be negative.","title":"Step 7: Functions"},{"location":"functions/#step-7-functions","text":"Create a function which takes the attacker damage, defender health, and defender defense, and outputs the defender's new health. Note that you should cover edge cases, such as the fact that health can't be negative and that damage dealt can't be negative.","title":"Step 7: Functions"},{"location":"primitives/","text":"Step 3: More Primitives Step 3.1 Given opponent_health , determine if the opponent is dead. Store this value in a boolean variable called opponent_alive . Print this value to console. Set opponent_health to 0. Recalculate opponent_alive . Print this new value to console. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 2 Code goes here */ /** Step 3.1 */ // TODO: Set a boolean variable called opponent_alive. Print to console. // TODO: Set opponent_health to 0. Recalculate opponent_alive. Print to console. } } Expect Output true false Step 3.2 Given a new opponent with opponent2_health , print if there is any enemy alive. Use the or operator. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3.1 Code goes here */ /** Step 3.2 */ double opponent2_health = (((15 + 25) * 5 / (25 - 15)) - (5 * 3) + (5 / 3) + ((25 - 5) * 3 / (3 + 5) * 2) - ((25 * 5 / (3 + 5)) - (15 * 25 / (15 + 25)) + (3 * 3) % (5 * 3))) + (((15 + 25) * 5 / (25 - 15)) - (5 * 3) + (5 / 3) * 0 - 10); // TODO: Determine if this opponent is dead using code. Then, print whether there is any enemy alive. Use the 'or' operator. } } Expect Output false Step 3.3 Given a third opponent with opponent3_health , print to console whether all opponents are dead. Use the not and the and operators. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3.2 Code goes here */ /** Step 3.3 */ double opponent3_health = (((7 * 3) + (5 * 2) - (4 / 2) + (6 % 5)) - (2 * 1) + (8 - 8) * (9 / 3)) - ((12 / 3) * 2 - (15 - 10) * (2 - 2) + (3 * 1) % (7 - 5)); // TODO: Determine if this opponent is dead using code. Print the result to console. Then, print if all enemies are dead. Use 'and' and 'not' operators. } } Expect Output false Step 3.4 Create a char variable called opponent_tier . Set this variable to 'B'. The enemy has grown stronger! Increment this variable and print to console. Does that make sense? Try subtracting 2 from the variable and printing it to console. Given what the previous change, does this make more sense what might be going on? Lastly, to confuse you just a little bit more, subtract 1 more and print to console. Find why this is the output. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3.3 Code goes here */ /** Step 3.4 */ // TODO: Create a char variable called opponent_tier which is set to 'B'. // TODO: Increment the variable and print to console. // TODO: Subtract 2 from the variable and print to console. // TODO: Subtract 1 more from the variable and print to console. } } Expect Output C A @","title":"Step 3: More Primitives"},{"location":"primitives/#step-3-more-primitives","text":"","title":"Step 3: More Primitives"},{"location":"primitives/#step-31","text":"Given opponent_health , determine if the opponent is dead. Store this value in a boolean variable called opponent_alive . Print this value to console. Set opponent_health to 0. Recalculate opponent_alive . Print this new value to console. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 2 Code goes here */ /** Step 3.1 */ // TODO: Set a boolean variable called opponent_alive. Print to console. // TODO: Set opponent_health to 0. Recalculate opponent_alive. Print to console. } } Expect Output true false","title":"Step 3.1"},{"location":"primitives/#step-32","text":"Given a new opponent with opponent2_health , print if there is any enemy alive. Use the or operator. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3.1 Code goes here */ /** Step 3.2 */ double opponent2_health = (((15 + 25) * 5 / (25 - 15)) - (5 * 3) + (5 / 3) + ((25 - 5) * 3 / (3 + 5) * 2) - ((25 * 5 / (3 + 5)) - (15 * 25 / (15 + 25)) + (3 * 3) % (5 * 3))) + (((15 + 25) * 5 / (25 - 15)) - (5 * 3) + (5 / 3) * 0 - 10); // TODO: Determine if this opponent is dead using code. Then, print whether there is any enemy alive. Use the 'or' operator. } } Expect Output false","title":"Step 3.2"},{"location":"primitives/#step-33","text":"Given a third opponent with opponent3_health , print to console whether all opponents are dead. Use the not and the and operators. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3.2 Code goes here */ /** Step 3.3 */ double opponent3_health = (((7 * 3) + (5 * 2) - (4 / 2) + (6 % 5)) - (2 * 1) + (8 - 8) * (9 / 3)) - ((12 / 3) * 2 - (15 - 10) * (2 - 2) + (3 * 1) % (7 - 5)); // TODO: Determine if this opponent is dead using code. Print the result to console. Then, print if all enemies are dead. Use 'and' and 'not' operators. } } Expect Output false","title":"Step 3.3"},{"location":"primitives/#step-34","text":"Create a char variable called opponent_tier . Set this variable to 'B'. The enemy has grown stronger! Increment this variable and print to console. Does that make sense? Try subtracting 2 from the variable and printing it to console. Given what the previous change, does this make more sense what might be going on? Lastly, to confuse you just a little bit more, subtract 1 more and print to console. Find why this is the output. /** Main.java */ public class Main { public static void main(String[] args) { /** Steps 1 - 3.3 Code goes here */ /** Step 3.4 */ // TODO: Create a char variable called opponent_tier which is set to 'B'. // TODO: Increment the variable and print to console. // TODO: Subtract 2 from the variable and print to console. // TODO: Subtract 1 more from the variable and print to console. } } Expect Output C A @","title":"Step 3.4"},{"location":"print/","text":"Step 1: First Line of Code Let's start simple, print a message to the console. Here is some starter code: /** Main.java */ // Note: All code typically lives within a class public class Main { // This method is the entry point for a program. Research what each of the keywords mean. public static void main(String[] args) { // TODO: Print a Welcome Message Here } }","title":"Step 1: First Line of Code"},{"location":"print/#step-1-first-line-of-code","text":"Let's start simple, print a message to the console. Here is some starter code: /** Main.java */ // Note: All code typically lives within a class public class Main { // This method is the entry point for a program. Research what each of the keywords mean. public static void main(String[] args) { // TODO: Print a Welcome Message Here } }","title":"Step 1: First Line of Code"},{"location":"setup/","text":"Step 0: Setup This assumes that you have already had your jdk, ide, etc setup. I am skipping this step since in FRC, your environment is mostly setup for you. Assuming you are in Visual Studio Code, you should be able to create a new Java project, and run the whole project using the play button.","title":"Step 0: Setup"},{"location":"setup/#step-0-setup","text":"This assumes that you have already had your jdk, ide, etc setup. I am skipping this step since in FRC, your environment is mostly setup for you. Assuming you are in Visual Studio Code, you should be able to create a new Java project, and run the whole project using the play button.","title":"Step 0: Setup"}]}